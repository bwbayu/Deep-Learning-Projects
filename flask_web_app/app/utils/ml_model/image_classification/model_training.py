# -*- coding: utf-8 -*-
"""Image-classification-animals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ZzNuBWj6QT5K9kaGTZm9QAjlu1Efvrb

link dataset : https://www.kaggle.com/datasets/antobenedetti/animals/data
"""

import numpy as np
import os
from PIL import Image
import tensorflow as tf
import matplotlib.pyplot as plt
import random
import tensorflow as tf
from sklearn.utils import shuffle
import cv2
from tqdm import tqdm
from keras.preprocessing.image import ImageDataGenerator
import zipfile

# # unzip files
# local_zip = '/content/drive/MyDrive/Dataset/animals.zip'
# zip_ref = zipfile.ZipFile(local_zip, 'r')
# zip_ref.extractall('/content/drive/MyDrive/Dataset')
# zip_ref.close()

dataset = list(os.walk("/content/drive/MyDrive/Dataset/animals/train"))
label_names = dataset[0][1]
dict_labels = dict(zip(label_names, list(range(len(label_names)))))
print(dict_labels)

batch_size = 32

train_datagen = ImageDataGenerator(
    rescale=1.0 / 255,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    width_shift_range=0.1,
    height_shift_range=0.1,
)

train_generator = train_datagen.flow_from_directory(
    "/content/drive/MyDrive/Dataset/animals/train",
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode="categorical",
)

valid_datagen = ImageDataGenerator(rescale=1.0 / 255, validation_split=0.7)

valid_generator = valid_datagen.flow_from_directory(
    "/content/drive/MyDrive/Dataset/animals/val",
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode="categorical",
    subset="validation",
)

test_datagen = ImageDataGenerator(rescale=1.0 / 255, validation_split=0.3)

test_generator = test_datagen.flow_from_directory(
    "/content/drive/MyDrive/Dataset/animals/val",
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode="categorical",
    subset="validation",
)

base_model = tf.keras.applications.MobileNet(
    input_shape=(224, 224, 3), include_top=False, weights="imagenet"
)

base_model.trainable = False

model = tf.keras.models.Sequential()
model.add(base_model)
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(5, activation="softmax"))

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

history = model.fit(train_generator, epochs=10, validation_data=valid_generator)

plt.plot(history.history["accuracy"], color="red", label="train")
plt.plot(history.history["val_accuracy"], color="blue", label="validation")
plt.legend()
plt.show()

model.save("/content/drive/MyDrive/Dataset/model_animal.h5")

prediksi = model.evaluate(test_generator, batch_size=32)
